datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Poll {
  id        String      @id @default(cuid())
  title     String
  createdAt DateTime    @default(now())
  endsAt    DateTime?
  authorId  String
  author    User        @relation(fields: [authorId], references: [id])
  options   Option[]
  votes     Vote[]
  isAnonymous Boolean   @default(false)
}

model Option {
  id      String    @id @default(cuid())
  text    String
  pollId  String
  poll    Poll      @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes   Vote[]
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  pollId    String
  optionId  String
  userId    String
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  polls         Poll[]
  votes         Vote[]
}